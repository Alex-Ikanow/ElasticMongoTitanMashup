input {
  file {
      type => "netflow"
      path => "/tmp/logstash/*.csv"
      #start_position => "beginning"
  }
}
filter
{
        csv
        {
            columns=> [
"ts","te","td","sa","da","sp","dp","pr","flg","fwd","stos","ipkt","ibyt","opkt","obyt","in","out","sas","das","smk","dmk","dtos","dir","nh","nhb","svln","dvln","ismc","odmc","idmc","osmc","mpls1","mpls2","mpls3","mpls4","mpls5","mpls6","mpls7","mpls8","mpls9","mpls10","cl","sl","al","ra","eng","exid","tr"
                ]
            }
        if [ts] !~ "^20[0-9][0-9]-.*" {
            drop {}
            }
            date {
                match => [ "ts" , "yyyy-MM-dd HH:mm:ss" ]
                }
            mutate {
                remove_field => ["al","cl","das","dir","dmk","dtos","dvln","eng","exid","fwd","host","idmc","ismc","mpls1",
                    "mpls2","mpls3","mpls4","mpls5","mpls6","mpls7","mpls8","mpls9","mpls10",
                    "nh","nhb", "odmc","osmc","in","out","ra","sas", "sl","smk","stos","svln", "te","tr"
                    ]
                convert => ["ibyt", "integer" ]
                convert => ["ipkt", "integer" ]
                convert => ["obyt", "integer" ]
                convert => ["opkt", "integer" ]
                convert => [ "td", "float" ]

                }
            if [sa] =~ "^(192[.]168[.]|10[.]).*" {
                mutate {
                    add_field => { "cip" => "%{sa}" }
                    add_field => { "sip" => "%{da}" }
                    add_field => { "shost" => "%{da}" }
                    add_field => { "cp" => "%{sp}" }
                    replace => [ "ibyt" , "%{obyt}" ]
                    replace => [ "obyt" , "%{ibyt}" ]
                    replace => [ "ipkt" , "%{opkt}" ]
                    replace => [ "opkt" , "%{ipkt}" ]
                    }
                mutate {
                    replace => [ "sp" , "%{dp}" ]
                    remove_field => ["dp", "sa", "da" ]
                    }
                geoip {
                    source => "da"
                    fields => ["timezone","location","latitude","longitude", "region_name"]
                    }
                }
            else {
                mutate {
                    add_field => { "cip" => "%{da}" }
                    add_field => { "sip" => "%{sa}" }
                    add_field => { "shost" => "%{sa}" }
                    add_field => { "cp" => "%{dp}" }
                    remove_field => ["dp", "sa", "da" ]
                    }
               geoip {
                   source => "sip"
                   fields => ["timezone","location","latitude","longitude", "country_code2"]
                   }
                }    
                dns {
                    reverse => [ "shost" ]
                    action => "replace"
                    }
                if [geoip][country_code2] =~ /.+/ {
                        mutate {
                            replace => [ "message", "%{@timestamp} (%{td}) - %{pr} - %{cip} : %{cp} [] <-> %{sip} : %{sp} [ %{shost} / %{[geoip][country_code2]} ] - < %{ibyt}/%{ipkt} > %{obyt}/%{opkt}" ]
                            remove_field => [ "ts" ]
                            }
                        }
                    else {
                        mutate {
                            replace => [ "message", "%{@timestamp} (%{td}) - %{pr} - %{cip} : %{cp} [] <-> %{sip} : %{sp} [ %{shost} ] - < %{ibyt}/%{ipkt} > %{obyt}/%{opkt}" ]
                            remove_field => [ "ts" ]
                            }
                    }
                    
                #
                # ANNOTATIONS
                # (Slightly over complicated because base logstash elements not really designed for this sort of thing)
                #    
                mutate {
                	add_field => { "[_@][e][ip]" => "%{sip}" }
                	add_field => { "[_@][e][ip]" => "%{cip}" }
                	#add_field => { "[_@][a][s]" => "%{cip}" }
                	#add_field => { "[_@][a][v]" => "connects_to" }
                	#add_field => { "[_@][a][o]" => "%{sip}" }
                }    
                mutate {
                	add_field => { "[tmp][s]" => "%{cip}" }
                	add_field => { "[tmp][v]" => "connects_to" }
                	add_field => { "[tmp][o]" => "%{sip}" }
                }
                # Hack: can't create arrays of nested objects except via this (+below) workaround
                json_encode {
                	source => "tmp"
                	target => "tmp_json"
                }
                if [shost] != [sip] {
	                mutate {
	                	add_field => { "[_@][e][host]" => "%{shost}" }
	                	add_field => { "[tmp2][s]" => "%{shost}" }
	                	add_field => { "[tmp2][v]" => "represents" }
	                	add_field => { "[tmp2][o]" => "%{sip}" }	                	
	                }
	                json_encode {
    	            	source => "tmp2"
        	        	target => "tmp2_json"
            	    }
	                mutate {
	                	#(Hack: ensure host is represented as an array)
	                	split => [ "[_@][e][host]", "$#@!" ]
	                	add_field => { "assocs" => '{ "a": [ %{tmp_json}, %{tmp2_json} ] }' }
	                }
                }
                else {
	                mutate {
	                	add_field => { "assocs" => '{ "a": [ %{tmp_json} ] }' }
	                }
                }
            	json {
            		source => "assocs"
            		target => "assocs_json"
            	}
                mutate {
                	remove_field => [ "tmp", "tmp_json", "tmp2", "tmp2_json", "assocs" ]
                	rename => [ "[assocs_json][a]", "[_@][a]" ]
                }
                mutate {
                	remove_field => [ "assocs_json" ]
                }
                #
                # END ANNOTATIONS
                #
            }
output {
	mongodb {
		database => "test"
		collection => "netflow_logs"
		uri => "mongodb://localhost:27017"
		generateId => true
		isodate => true
	}
}
